# docker-compose.coolify.yml - Configuration specifically for Coolify Deployment

services:
  # Application Database (TimescaleDB Extension on PostgreSQL)
  timescaledb:
    image: timescale/timescaledb:2.13.1-pg14
    environment:
      # Define these in Coolify Environment Variables:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: postgres
    # ports: section removed - Internal access only
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Added restart policy

  # Temporal Persistence Database (Standard PostgreSQL)
  temporal-postgresql:
    image: postgres:14
    environment:
      # Define these in Coolify Environment Variables (or rely on defaults):
      POSTGRES_USER: ${TEMPORAL_DB_USER:-temporal}      # Default: temporal
      POSTGRES_PASSWORD: ${TEMPORAL_DB_PASSWORD:-temporal} # Default: temporal
      POSTGRES_DB: temporal
    # ports: section removed - Internal access only
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEMPORAL_DB_USER:-temporal} -d temporal"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Added restart policy

  # Temporal Server (Using auto-setup image - Note production considerations)
  temporal:
    image: temporalio/auto-setup:1.22.3
    environment:
      - DB=postgresql
      - DB_PORT=5432 # Internal port Temporal uses to reach postgres
      - POSTGRES_USER=${TEMPORAL_DB_USER:-temporal}
      - POSTGRES_PWD=${TEMPORAL_DB_PASSWORD:-temporal}
      - POSTGRES_SEEDS=temporal-postgresql # Connects to the postgres service name
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development.yaml
    ports:
      # Keep 7233 exposed for internal linking and potential external access:
      - "7233:7233"
    depends_on:
      temporal-postgresql:
        condition: service_healthy
    volumes:
      # Mount config from host path prepared by Coolify
      # Assumes temporal-config dir exists in repo root
      - ./temporal-config:/etc/temporal/config/dynamicconfig
    healthcheck:
      test: ["CMD", "tctl", "--address", "localhost:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Added restart policy

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.21.3
    ports:
      # Keep 8080 exposed for access via Coolify FQDN/domain:
      - "8080:8080"
    environment:
      # Connects to the temporal service using its service name:
      - TEMPORAL_ADDRESS=temporal:7233
      # - TEMPORAL_CORS_ORIGINS=http://localhost:3000 # Likely not needed for prod
    depends_on:
      - temporal
    restart: unless-stopped # Added restart policy

  # Temporal Admin Tools (Optional, for exec commands)
  temporal-admin-tools:
    image: temporalio/admin-tools:1.22 # Or a newer compatible version
    container_name: temporal-admin-tools-${COOLIFY_CONTAINER_NAME:-local} # Optional
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    restart: 'no' # Doesn't need to run continuously

  # --- Database Initializer Service ---
  db-init:
    build:
      context: . # Uses the same Dockerfile
    # Runs the compiled initDb script
    command: ["node", "dist/scripts/initDb.js"]
    environment:
      # Inherit necessary DB connection vars from Coolify secrets
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - NODE_ENV=production
    depends_on:
      timescaledb: # Waits for the database service
        condition: service_healthy
    restart: 'no' # Run only once per 'docker compose up' or deployment

  # --- Application Services ---
  worker:
    build:
      context: . # Uses the same Dockerfile
    command: ["node", "dist/worker.js"] # Runs the compiled worker
    restart: unless-stopped
    environment:
      # Use simple service names for connection
      - TEMPORAL_ADDRESS=temporal:7233
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - NODE_ENV=production
      # Add any other production env vars needed by the worker
    depends_on:
      # Depends on infra being ready, init job doesn't need to complete first
      # if the init script is idempotent (safe to run multiple times)
      - temporal
      - timescaledb
      # - db-init # Optionally depend on init finishing, but can slow startup

  scheduler:
    build:
      context: . # Uses the same Dockerfile
    command: ["node", "dist/scheduler.js"] # Runs the compiled scheduler
    restart: unless-stopped
    environment:
      # Use simple service names for connection
      - TEMPORAL_ADDRESS=temporal:7233
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - NODE_ENV=production
      # Add any other production env vars needed by the scheduler
    depends_on:
      - temporal
      - timescaledb
      # - db-init # Optionally depend on init finishing

# Named volumes for persistent data storage (Coolify maps these)
volumes:
  timescale_data:
    name: ${COOLIFY_RESOURCE_UUID:-local}_timescale_data # Use Coolify naming convention
  temporal_postgres_data:
    name: ${COOLIFY_RESOURCE_UUID:-local}_temporal_postgres_data # Use Coolify naming convention

# Note: Coolify defines the network externally based on generated compose
# networks:
#   default:
#     name: ${COOLIFY_RESOURCE_UUID:-lighthouse-network}
#     external: true # Important for potential future cross-stack communication if needed