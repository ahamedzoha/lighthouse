# docker-compose.coolify.yml - Configuration specifically for Coolify Deployment
# NOTE: This file is NOT used for local development.

services:
  # Application Database (TimescaleDB Extension on PostgreSQL)
  timescaledb:
    image: timescale/timescaledb:2.13.1-pg14
    environment:
      # Define these in Coolify Environment Variables:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      # Static User:
      POSTGRES_USER: postgres
    # ports: section removed - Internal access via Coolify network is sufficient
    ports:
      - 5432:5432
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks: section removed

  # Temporal Persistence Database (Standard PostgreSQL)
  temporal-postgresql:
    image: postgres:14
    environment:
      # Define these in Coolify Environment Variables (or rely on defaults):
      POSTGRES_USER: ${TEMPORAL_DB_USER:-temporal}      # Default: temporal
      POSTGRES_PASSWORD: ${TEMPORAL_DB_PASSWORD:-temporal} # Default: temporal
      # Static DB Name:
      POSTGRES_DB: temporal
    # ports: section removed - Internal access via Coolify network is sufficient
    ports:
      - 5433:5432
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    healthcheck:
      # Uses the parameterized user for the check
      test: ["CMD-SHELL", "pg_isready -U ${TEMPORAL_DB_USER:-temporal} -d temporal"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks: section removed

  # Temporal Server (Using auto-setup image - Note production considerations)
  temporal:
    image: temporalio/auto-setup:1.22.3
    environment:
      - DB=postgresql
      - DB_PORT=5432 # Internal port Temporal uses to reach postgres
      # Uses parameterized credentials matching temporal-postgresql service:
      - POSTGRES_USER=${TEMPORAL_DB_USER:-temporal}
      - POSTGRES_PWD=${TEMPORAL_DB_PASSWORD:-temporal}
      # Connects to the postgres service using its service name:
      - POSTGRES_SEEDS=temporal-postgresql
      # Mounts dynamic config from volume:
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development.yaml
    ports:
      # Keep 7233 exposed for internal linking and potential external access:
      - "7233:7233"
    depends_on:
      temporal-postgresql:
        condition: service_healthy
    volumes:
      # Ensure './temporal-config' directory exists in your Git repo:
      - ./temporal-config:/etc/temporal/config/dynamicconfig
    healthcheck:
      # Checks if the cluster is healthy via tctl inside the container
      test: ["CMD", "tctl", "--address", "localhost:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks: section removed
    

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.21.3
    ports:
      # Keep 8080 exposed for access via Coolify FQDN/domain:
      - "8080:8080"
    environment:
      # Connects to the temporal service using its service name:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    depends_on:
      - temporal
    # networks: section removed

# Temporal Admin Tools (for running tctl commands via exec)
  # temporal-admin-tools:
  #   # Use a matching version tag if possible, otherwise use latest cautiously
  #   image: temporalio/admin-tools:1.22 # Or latest version like 1.23, check Docker Hub if 1.22 doesn't exist
  #   container_name: temporal-admin-tools # Optional but can be helpful for exec commands
  #   depends_on:
  #     - temporal
  #   environment:
  #     # Points tctl inside this container to the temporal service
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   # ports: section removed - Not typically needed
  #   networks: # This should still be removed/commented if applying Coolify logic
  #     # - temporal-network 
  #   stdin_open: true # Keep for interactive tctl
  #   tty: true        # Keep for interactive tctl

# Top-level networks definition removed

# Named volumes for persistent data storage (Coolify creates these)
volumes:
  timescale_data:
  temporal_postgres_data: